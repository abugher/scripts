#!/bin/bash

image=~/images/orange_pi/Armbian_5.65_Orangepipcplus_Debian_stretch_next_4.14.78.img
card_device=/dev/sdc
root_partition="${card_device}1"
big_partition="${card_device}2"
label=motion
mount_point=/var/lib/motion


output() {
  echo "OUTPUT:  ${1}"
}


fail() {
  echo "ERROR:  ${1}" >&2
  exit 1
}


get_root() {
  output "We're going to need some root.  Authenticate for sudo."
  sudo -v || fail "Failed to get root."
}


write_image() {
  output "Writing image."
  # https://www.armbian.com/orange-pi-pc-plus/
  # https://dl.armbian.com/orangepipcplus/Debian_stretch_next.7z.torrent
  dd if=$image bs=1M | pv | sudo dd bs=1M of=$card_device || fail "Failed to write image."
  sudo parted $card_device resizepart 1 10240MB \
    || fail "Failed to resize root partition."
  sudo e2fsck -f $root_partition \
    || fail "Failed to check root filesystem."
  sudo resize2fs $root_partition \
    || fail "Failed to resize root filesystem."
  sudo tune2fs -i 0 -c 0 $root_partition \
    || fail "Failed to tune root filesystem."
}


create_big_volume() {
  output "Getting storage parameters."
  parted_output=$(
    sudo parted $card_device unit s print free \
      || fail "Failed to analyze device:  '${card_device}'"
  )

#  read start end <<< $(
#      awk '/Free Space/ {print $1" "$2}' \
#      <<< $parted_output \
#      | tail -n 1
#  )
  output "Writing big partition."
  # 'I' for Ignore, to ignore a warning about alignment.
  #echo I | sudo parted $card_device mkpart primary $start $end \
  sudo parted $card_device mkpart primary 10241MB -- -1MB \
    || fail "Failed to write big partition."
  output "Writing big filesystem."
  sudo mkfs.f2fs -l $label $big_partition \
    || fail "Failed to write big filesystem."
}


configure_os() {
  echo "LABEL=${label} ${mount_point} f2fs defaults,noatime,nodiratime 0 2" | sudo tee -a /mnt/card/etc/fstab \
    || fail "Failed to write fstab."

  # Do this manually (once):
  #sudo passwd orangepi

  sudo sed -i "s#^root:.*\$#$(
    sudo grep '^orangepi' /etc/shadow \
      | sed 's/orangepi/root/' \
      || fail "failed to extract hash for root (orangepi)"
  )#" /mnt/card/etc/shadow \
    || fail "Failed to write root password."

  for file in \
    /mnt/card/lib/systemd/system/armbian-firstrun-config.service \
    /mnt/card/lib/systemd/system/armbian-firstrun.service \
    /mnt/card/usr/lib/armbian/armbian-firstrun-config \
    /mnt/card/usr/lib/armbian/armbian-firstrun \
    /mnt/card/etc/systemd/system/multi-user.target.wants/armbian-firstrun-config.service \
    /mnt/card/etc/profile.d/armbian-check-first-login.sh \
    /mnt/card/etc/profile.d/armbian-check-first-login-reboot.sh \
    /mnt/card/etc/systemd/system/multi-user.target.wants/armbian-firstrun-config.service \
    /mnt/card/var/lib/systemd/deb-systemd-helper-enabled/multi-user.target.wants/NetworkManager.service \
    /mnt/card/etc/systemd/system/multi-user.target.wants/NetworkManager.service \
    /mnt/card/lib/systemd/system/NetworkManager.service \
    /mnt/card/etc/systemd/system/default.target.wants/ssh.service \
    /mnt/card/etc/ssh/ssh_host_*_key*
  do
    sudo rm -f $file \
      || fail "Failed to remove:  ${file}"
  done

  for file in \
    /mnt/card/lib/systemd/system/armbian-firstrun-config.service \
    /mnt/card/lib/systemd/system/armbian-firstrun.service \
    /mnt/card/usr/lib/armbian/armbian-firstrun-config \
    /mnt/card/usr/lib/armbian/armbian-firstrun \
    /mnt/card/lib/systemd/system/NetworkManager.service
  do
    sudo ln -s /dev/null $file \
      || fail "Failed to mask service file:  '${file}'"
  done

  read wpa_psk < ~/sensitive/accounts/network/puppies/wpa_psk.txt \
    || fail "Failed to read WPA PSK."
  sudo tee /mnt/card/etc/network/interfaces.d/wlan0 << EOF
iface wlan0 inet static
    wpa-essid           puppies
    wpa-psk             $wpa_psk
    address             192.168.11.64
    netmask             255.255.255.0
    gateway             192.168.11.1
    dns-nameservers     192.168.11.54
    dns-search          neuronpointer.net
EOF
  if ! test 0 == "${?}"; then
    fail "Failed to write:  interfaces.d/wlan0" 
  fi
  echo 'auto wlan0' | sudo tee -a /mnt/card/etc/network/interfaces \
    || fail "Failed to write to interfaces file."

  
  {
    sudo tee -a /mnt/card/etc/ssh/sshd_config \
      || fail "Failed to write to sshd_config."
  } << EOF
AllowUsers root
HostKey /etc/ssh/ssh_host_rsa_key
UsePam no
EOF

  sudo ln -s /lib/systemd/system/ssh.service /mnt/card/etc/systemd/system/default.target.wants/ssh.service \
    || fail "Failed to write ssh service file."

  sudo touch /mnt/card/etc/ssh/ssh_host_rsa_key \
    || fail "Failed to initialize SSH host key."
  sudo chmod 0600 /mnt/card/etc/ssh/ssh_host_rsa_key \
    || fail "Failed to set permissions on SSH host key."
  cat ~/sensitive_ansible/inventory/hosts/spy/files/ssh_keys/ssh_host_rsa_key | sudo tee /mnt/card/etc/ssh/ssh_host_rsa_key \
    || fail "Failed to write SSH host key (private)."
  cat ~/ansible/inventory/hosts/spy/files/ssh_keys/ssh_host_rsa_key.pub | sudo tee /mnt/card/etc/ssh/ssh_host_rsa_key.pub \
    || fail "Failed to write SSH host key (public)."
}

main() {
  get_root
  if mountpoint /mnt/card; then
    sudo umount /mnt/card \
      || fail "Failed to preparatively unmount /mnt/card."
  fi
  write_image
  create_big_volume
  sudo mount $root_partition /mnt/card \
    || fail "Failed to mount card."
  configure_os
  sudo umount /mnt/card \
    || fail "Failed to unmount card."
}


time main
