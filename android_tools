#!/bin/bash
#
# This program is free software. It comes without any warranty, to the extent
# permitted by applicable law. You can redistribute it and/or modify it under
# the terms of the Do What The Fuck You Want To Public License, Version 2, as
# published by Sam Hocevar. See WTFPL.txt or http://www.wtfpl.net/ for more
# details.

shopt -s expand_aliases

now=$(date "+%Y-%m-%d_%H:%M:%S")

source android_config

backup_options_5="-f ${backup_file} -apk -all -nosystem -shared"
backup_options_6="-f ${backup_file} -all"
backup_file=${backup_dir}/${now}.ab


function output {
  echo "${output_prefix}${1}"
}


function error_output {
  echo "${output_prefix}ERROR:  ${1}"
}


function prompt {
  # Clear stdin.
  while read -r -t 0; do read -r; done
  read -p "${output_prefix}${1}  " response
}


alias fail='{ read message; error_output "${message}"; return 1; } <<<'


function reboot_from_adb_to_adb {
  output                        "Rebooting phone."
  adb reboot                    || fail "Failed to reboot from adb to adb."
}


function reboot_from_adb_to_fastboot {
  output                        "Rebooting to fastboot."
  adb reboot-bootloader         || fail "Failed to reboot from adb to fastboot."
}


function reboot_from_adb_to_recovery {
  output                        "Rebooting to recovery."
  adb reboot recovery           || fail "Failed to reboot from adb to recovery."
}


function reboot_from_fastboot_to_adb {
  output                        "Rebooting phone."
  fastboot reboot               || fail "Failed to reboot from fastboot to adb."
}


function reboot_from_fastboot_to_fastboot {
  output                        "Rebooting to fastboot."
  fastboot reboot-bootloader    || fail "Failed to reboot from fastboot to fastboot."
}


function reboot_from_fastboot_to_recovery {
  reboot_from_fastbot_to_adb    || fail "Failed to reboot from fastboot to adb."
  reboot_from_adb_to_recovery   || fail "Failed to reboot from adb to recovery."
}


function backup_data {
  backup_options=$backup_options_5
  if test $start_major_version -gt 5; then
    backup_options=$backup_options_6
  fi

  while true; do
    output "Backing up data to:  ${backup_file}"
    adb backup $backup_options
    file_size=$(stat --printf="%s" $backup_file)
    if test 0 = $file_size; then
      output "Warning:  That backup was empty."
      output "Warning:  Use the phone's back button to quit the backup if still running."
      prompt "Try again, Quit, or Continue?  [T,q,c]"
      case "${response}" in
        't')
          continue
          ;;
        'q')
          exit
          ;;
        'c')
          break
          ;;
        *)
          continue
          ;;
      esac
    else
      break
    fi
  done

  output "Backup successful."
}


function restore_data {
  while true; do
    output "Restoring data from:  $backup_file"
    adb restore $backup_file
    output "Warning:  I can't verify success.  (This is normal.)"
    output "Warning:  I need your judgement on whether to continue."
    prompt "Try again, Quit, or Continue?  [t,q,C]"
    case "${response}" in
      't')
        continue
        ;;
      'q')
        exit
        ;;
      'c')
        break
        ;;
      *)
        break
        ;;
    esac
  done

  output "Restore successful."
}


function greet {
  cat << EOF
| Requirements:
|
|   Your bootloader must be unlocked.
|
|   Your phone must have a working Android installation.
|
|   adb and fastboot commands must be available.  On Debian Jessie, get
|   these packages:
|     android-tools-adb
|     android-tools-fastboot
|
|   Developer options must be enabled:
|     Settings --> About Phone --> Build Number --> tap a lot
|
|   USB debugging must be enabled:
|     Settings --> Developer --> USB Debugging
|
|   The phone must be connected to this host by USB.
|
| Itinerary:
| 
|   I will download the latest stock image for ${device_friendly_name}, code
|   named ${device_code_name}.  
|   
|   I will backup application and shared data from the phone.
|   
|   I will install the image.  
|   
|   You will give the phone wifi and google credentials.  
|   
|   The phone will restore your apps.  This will take a while.
|
|   You will install any unapproved apps you use.
|
|   You will re-enable USB debugging.
|
|   I will install a modified boot volume with selinux-compatible su, or somesuch.
|
|   I will install TWRP recovery.
|
|   You will answer a prompt in TWRP to allow modification of system volume.
|
|   You will hit "Reboot", then "System", in TWRP.
|
|   You will accept the offer from TWRP to install SuperSU and root the phone.
|   
|   I will restore application and shared data to the phone.  
|
| Be advised:
|
|   Do not plug or unplug any USB devices, especially Android devices, during
|   this process.  (We count devices, and that will throw off the count.)
|
| 
EOF

  
}


function bye {
  cat << EOF
| 
| Success!  Your phone should be up to date, and your data and settings should
| be restored.
EOF
}


function latest_image_link {
  # Output URL of latest image, scraped from last entry for this device in the listing.

  image_list_url='https://developers.google.com/android/nexus/images'

  wget \
    -O - \
    $image_list_url \
    2> /dev/null \
    | grep $device_code_name'.*'factory \
    | tail -n 1 \
    | awk -F '"' '{print $2}'
}


function latest_twrp_image_link {
  # Output URL of latest image, scraped from last entry for this device in the listing.

  image_list_url='https://dl.twrp.me/hammerhead/'

  wget $image_list_url -O - 2>/dev/null \
    | awk -F '"' '/href.*dl\.twrp\.me/ {print $2}' \
    | head -n 1 \
    | sed 's/\.html$//'
}


function download_latest_twrp_image {
  if test -e $twrp_image_file; then
    output "Warning:  TWRP image file already exists.  Skipping download."
  else
    output "TWRP download begins."
    wget --referer $latest_twrp_image_link $latest_twrp_image_link
    output "TWRP download complete."
  fi
}


function download_latest_image {
  if test -e $image_file; then
    output "Warning:  Image file already exists.  Skipping download."
  else
    output "Download begins."
    wget $latest_image_link
    output "Download complete."
  fi
}


function cycle_adb {
  output "Killing adb."
  # Sometimes you can start adb as the wrong user and get in an unhappy state.
  # Clear that.
  adb kill-server
  output "Starting adb."
  adb start-server
}


function unpack_image {
  output "Unpacking image."
  tar xf $image_file
  output "Image unpacked."
}


function install_image {
  cd $image_dir || fail "Failed to enter image directory."

  output "Beginning installation."

  install_script_file='flash-all.sh'
  install_script_pure_file='flash-all-pure.sh'
  install_script_real_file='flash-all-real.sh'
  grep -Ev ^#'|'^\$ $install_script_file > $install_script_pure_file
  cat > $install_script_real_file << EOF
fastboot flash bootloader bootloader-hammerhead-*.img
fastboot reboot-bootloader
sleep 5
fastboot flash radio radio-hammerhead-*.img
fastboot reboot-bootloader
sleep 5
fastboot -w update image-hammerhead-*.zip
EOF

  sed \
    -i \
    '
      s/bootloader-hammerhead-[a-z0-9]*\.img/bootloader-hammerhead-\*\.img/;
      s/radio-hammerhead-[a-z0-9]*-[0-9\.]*\.img/radio-hammerhead-\*\.img/;
      s/image-hammerhead-[a-z0-9]*\.zip/image-hammerhead-\*\.zip/;
    ' \
    $install_script_pure_file

  # This might be paranoid.  The script gets downloaded over https.  (Trust
  # Google with root on host system?)  I don't think the script changes much
  # anyway.
  if ! diff $install_script_pure_file $install_script_real_file; then
    error_output "The install script changed.  You may wish to review it, and/or the"
    error_output "procedure at:  https://developers.google.com/android/nexus/images"
    error_output "...then edit this script appropriately."
    return 1
  fi

  # flash-all.sh contents, or similar
  output "Flashing bootloader."
  fastboot flash bootloader bootloader-hammerhead-*.img || fail "Failed to flash bootloader."
  reboot_from_fastboot_to_fastboot || fail "Failed to reboot to fastboot."
  sleep 1
  output "Flashing radio."
  fastboot flash radio radio-hammerhead-*.img || fail "Failed to flash radio."
  reboot_from_fastboot_to_fastboot || fail "Failed to reboot to fastboot."
  sleep 1
  output "Flashing image."
  fastboot -w update image-hammerhead-*.zip || fail "Failed to flash image."

  output "Installation complete."
  
  cd - >/dev/null || fail "Failed to return from image directory."
}


function install_modified_boot {
  output "Installing modified boot volume."

  fastboot flash boot ~/images/nexus5/modified_boot_for_selinux_compatible_su/boot.img || fail "Failed to flash modified boot."

  output "Installation of modified boot volume successful."
}


function install_twrp_image {
  output "Beginning TWRP recovery image installation."

  fastboot flash recovery $twrp_image_file || fail "Failed to flash twrp image:  ${twrp_image_file}"

  output "TWRP recovery image installation successful."
}


function wait_for_adb {
  output "Waiting for adb..."
  adb_count=$(count_adb_devices)
  while ! test $adb_count -eq 1; do
    output "... ${adb_count} / 1 devices detected."
    sleep 1
    adb_count=$(count_adb_devices)
  done
  output "adb is up."
}


function count_adb_devices {
  echo $(( $(adb devices | wc -l) - 2 ))
}


function wait_for_fastboot {
  output "Waiting for fastboot..."
  fastboot_count=$(count_fastboot_devices)
  while ! test $fastboot_count -eq 1; do
    output "... ${fastboot_count} / 1 devices detected."
    sleep 1;
    fastboot_count=$(count_fastboot_devices)
  done
  output "fastboot is up."
}


function count_fastboot_devices {
  echo $(fastboot devices | wc -l)
}
