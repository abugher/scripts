#!/bin/bash
# torrent-cleanup

ssh_target=ansible@files
credentials=transmission:$(pass show shared/transmission)
watch_dir=/storage/bittorrent/torrents
content_dir=/storage/bittorrent/content/
exceptions=(
  "radio.m3u"
  "nightvale"
)

now="$(date +%s)"


function main {
  # These aren't torrents, but shouldn't be deleted.
  names=( "${exceptions[@]}" )
  files=()
  orphans=()

  while read name; do
    names+=( "${name}" )
  done < <(
    ssh "${ssh_target}" transmission-remote -n "${credentials}" -l \
      | sed -E 's/([^ ]* *){10}//' \
      | sort
  )

  # What are the exact mechanics of read?  I think this would truncate trailing
  # spaces in file names, for example.  Then again, it should still work unless
  # two filenames are identical except the number of trailing spaces, since the
  # other read statement will also truncate them.
  while read file; do
    files+=( "${file}" )
  done < <(
    ssh "${ssh_target}" ls "${content_dir}" \
      | sort
  )

  for file in "${files[@]}"; do
    orphan="yes"
    for name in "${names[@]}"; do
      if test "${file}" == "${name}"; then
        orphan="no"
        # Efficiency might be improved by removing already matched names from the array, here.
        break
      fi
    done
    
    if test "yes" = "${orphan}"; then
      orphans+=( "${file}" )
    fi
  done

  # Do not delete the whole content directory, please.
  for orphan in "${orphans[@]}"; do
    if ! grep -q . <<< "${orphan}"; then
      continue
    fi
    printf 'Removing orphan:  "%s"' "${orphan}"
#    ssh -t "${ssh_target}" "cd '${content_dir}'; sudo -u debian-transmission rm -rf '${orphan}'"
    ssh -t "${ssh_target}" "cd '${content_dir}'; sudo rm -rf '${orphan}'" || fail "Failed to remove orphaned content."
  done

}


main "${@}"
