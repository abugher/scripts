#!/bin/bash
#
# This program is free software. It comes without any warranty, to the extent
# permitted by applicable law. You can redistribute it and/or modify it under
# the terms of the Do What The Fuck You Want To Public License, Version 2, as
# published by Sam Hocevar. See WTFPL.txt or http://www.wtfpl.net/ for more
# details.

now=$(date "+%Y-%m-%d_%H:%M:%S")
device_code_name='hammerhead'
device_friendly_name='Nexus 5'
backup_dir=~/backup/aaron-phone
backup_file=${backup_dir}/${now}.ab
# -apk:  Google backs up play store apk's, not out-of-band.  No
# -out-of-band-apk option available.
# -all:  This just specifies "all packages" as the target.
# -nosystem:  System settings would be nice, but compatibility is not
# guaranteed, since the system is being upgraded.
backup_options="-f $backup_file -apk -all -nosystem -shared"
shared_backup_options="-f $shared_backup_file -shared"

function main {
  latest_image_link=$(latest_image_link)
  image_file=$(echo $latest_image_link | sed 's/^.*\///')
  image_dir=$(echo $image_file| sed 's/-factory-[a-z0-9]*\.tgz$//')

  cd /tmp/                      || fail "Failed to enter directory:  /tmp"
  mkdir -p ${backup_dir}        || fail "Failed to create backup directory:  ${backup_dir}"
  greet                         || fail "Failed to greet the user."
  cycle_adb                     || fail "Failed to cycle adb."
  download_latest_image         || fail "Failed to download image."
  backup_data "application"     || fail "Failed to backup application data."
  backup_data "shared"          || fail "Failed to backup shared data."
  unpack_image                  || fail "Failed to unpack image."
  cd $image_dir                 || fail "Failed to enter image directory."
  install_image                 || fail "Failed to install image."
  restore_data "application"    || fail "Failed to restore application data."
  restore_data "shared"         || fail "Failed to restore shared data."
  reboot_phone                  || fail "Failed to reboot."

  bye
}


function output {
  echo -e "| ${1}"
}


function error_output {
  echo -e "| ERROR:  ${1}" >&2
}


function fail {
  error_output $1
  exit 1
}


function prompt {
  # Clear stdin.
  while read -r -t 0; do read -r; done
  read -p "| ${1}  " response
}


function reboot_phone {
  output "Rebooting phone."
  adb reboot
}


function backup_data {
  type=$1
  eval "backup_options=\$${type}_backup_options"
  eval "backup_file=\$${type}_backup_file"

  while true; do
    output "Backing up ${type} data to:  ${backup_file}"
    adb backup $backup_options
    file_size=$(stat --printf="%s" $backup_file)
    if test 0 = $file_size; then
      output "Warning:  That backup was empty."
      output "Warning:  Use the phone's back button to quit the backup if still running."
      prompt "Try again, Quit, or Continue?  [T,q,c]"
      case "${response}" in
        't')
          continue
          ;;
        'q')
          exit
          ;;
        'c')
          break
          ;;
        *)
          continue
          ;;
      esac
    else
      break
    fi
  done

  output "Backup successful."
}


function restore_data {
  type=$1
  eval "backup_file=\$${type}_backup_file"

  while true; do
    output "Restoring ${type} data from:  $backup_file"
    adb restore $backup_file
    output "Warning:  I can't verify success.  (This is normal.)"
    output "Warning:  I need your judgement on whether to continue."
    prompt "Try again, Quit, or Continue?  [t,q,C]"
    case "${response}" in
      't')
        continue
        ;;
      'q')
        exit
        ;;
      'c')
        break
        ;;
      *)
        break
        ;;
    esac
  done

  output "Restore successful."
}


function greet {
  cat << EOF
| Requirements:
|
|   Your bootloader must be unlocked.
|
|   adb and fastboot must be available.  On Debian Jessie, get these packages:
|     android-tools-adb
|     android-tools-fastboot
|
|   Developer options must be enabled:
|     Settings --> About Phone --> Build Number --> tap a lot
|
|   USB debugging must be enabled:
|     Settings --> Developer --> USB Debugging
|
|   The phone must be connected to this host by USB.
|
| Itinerary:
| 
|   I will download the latest stock image for ${device_friendly_name}, code
|   named ${device_code_name}.  
|   
|   I will backup application and shared data from the phone.
|   
|   I will install the image.  
|   
|   You will give the phone wifi and google credentials.  
|   
|   The phone will restore your apps.  This will take a while.
|
|   You will install any unapproved apps you use.
|
|   You will re-enable USB debugging.
|   
|   I will restore application and shared data to the phone.  
|   
|   I will reboot the phone.
| 
EOF

  
}


function bye {
  cat << EOF
| 
| Success!  Your phone should be up to date, and your data and settings should
| be restored.
EOF
}


function latest_image_link {
  # Output URL of latest image, scraped from last entry for this device in the listing.

  image_list_url='https://developers.google.com/android/nexus/images'

  wget \
    -O - \
    $image_list_url \
    2> /dev/null \
    | grep $device_code_name'.*'factory \
    | tail -n 1 \
    | awk -F '"' '{print $2}'
}


function download_latest_image {
  if test -e $image_file; then
    output "Warning:  Image file already exists.  Skipping download." >&2
  else
    output "Download begins."
    wget $latest_image_link
    output "Download complete."
  fi
}


function cycle_adb {
  output "Killing adb."
  # Sometimes you can start adb as the wrong user and get in an unhappy state.
  # Clear that.
  adb kill-server
  output "Starting adb."
  adb start-server
}


function unpack_image {
  output "Unpacking image."
  tar xf $image_file
  output "Image unpacked."
}


function install_image {
  output "Beginning installation."

  install_script_file='flash-all.sh'
  install_script_pure_file='flash-all-pure.sh'
  install_script_real_file='flash-all-real.sh'
  grep -Ev ^#'|'^\$ $install_script_file > $install_script_pure_file
  cat > $install_script_real_file << EOF
fastboot flash bootloader bootloader-hammerhead-*.img
fastboot reboot-bootloader
sleep 5
fastboot flash radio radio-hammerhead-*.img
fastboot reboot-bootloader
sleep 5
fastboot -w update image-hammerhead-*.zip
EOF

  sed \
    -i \
    '
      s/bootloader-hammerhead-[a-z0-9]*\.img/bootloader-hammerhead-\*\.img/;
      s/radio-hammerhead-[a-z0-9]*-[0-9\.]*\.img/radio-hammerhead-\*\.img/;
      s/image-hammerhead-[a-z0-9]*\.zip/image-hammerhead-\*\.zip/;
    ' \
    $install_script_pure_file

  # This might be paranoid.  The script gets downloaded over https.  (Trust
  # Google with root on host system?)  I don't think the script changes much
  # anyway.
  if ! diff $install_script_pure_file $install_script_real_file; then
    error_output "The install script changed.  You may wish to review it, and/or the\n  procedure at:  https://developers.google.com/android/nexus/images\n  ...then edit this script appropriately."
    return 1
  fi

  adb reboot bootloader

  # flash-all.sh contents
  output "Flashing bootloader."
  fastboot flash bootloader bootloader-hammerhead-*.img || fail "Failed to flash bootloader."
  fastboot reboot-bootloader || fail "Failed to reboot to bootloader."
  sleep 5
  output "Flashing radio."
  fastboot flash radio radio-hammerhead-*.img || fail "Failed to flash radio."
  fastboot reboot-bootloader || fail "Failed to reboot to bootloader."
  sleep 5
  output "Flashing image."
  fastboot -w update image-hammerhead-*.zip || fail "Failed to flash image."

  output "Installation complete.  The first boot should take about five minutes."
  output "Re-enable USB debugging and wait until all apps have updated."
  output "(Watch My Apps in the Play Store for progress.)"
  output "Then press Enter to continue."
  read
}


main
