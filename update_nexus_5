#!/bin/bash
#
# This program is free software. It comes without any warranty, to the extent
# permitted by applicable law. You can redistribute it and/or modify it under
# the terms of the Do What The Fuck You Want To Public License, Version 2, as
# published by Sam Hocevar. See WTFPL.txt or http://www.wtfpl.net/ for more
# details.

now=$(date "+%Y-%m-%d_%H:%M:%S")
device_code_name='hammerhead'
device_friendly_name='Nexus 5'
backup_dir=~/backup/aaron-phone
backup_file=${backup_dir}/${now}.ab
# -apk:  Google backs up play store apk's, not out-of-band.  No
# -out-of-band-apk option available.
# -all:  This just specifies "all packages" as the target.
# -nosystem:  System settings would be nice, but compatibility is not
# guaranteed, since the system is being upgraded.
backup_options_5="-f ${backup_file} -apk -all -nosystem -shared"
backup_options_6="-f ${backup_file} -all"
output_prefix='| '

function main {
  latest_image_link=$(latest_image_link)
  image_file=$(echo $latest_image_link | sed 's/^.*\///')
  image_dir=$(echo $image_file| sed 's/-factory-[a-z0-9]*\.tgz$//')
  latest_twrp_image_link=$(latest_twrp_image_link)
  twrp_image_file=$(echo $latest_twrp_image_link | sed 's/^.*\///')
  start_phone_count=$(count_phones)
  start_fastboot_count=$(count_fastboots)

  cd /tmp/                                      || fail "Failed to enter directory:  /tmp"
  mkdir -p ${backup_dir}                        || fail "Failed to create backup directory:  ${backup_dir}"
#  greet                                         || fail "Failed to greet the user."
  cycle_adb                                     || fail "Failed to cycle adb."

  start_version=$(adb shell getprop ro.build.version.release)
  start_major_version=$(echo $start_version | sed 's/\..*//g')

  echo $start_major_version | grep -q '^[0-9]$' || fail "Failed to ascertain starting version."

  download_latest_image                         || fail "Failed to download stock image."
  download_latest_twrp_image                    || fail "Failed to download TWRP recovery image."
#  backup_data                                   || fail "Failed to backup data."
#  unpack_image                                  || fail "Failed to unpack image."
#  reboot_to_fastboot                            || fail "Failed to reboot to fastboot."
#  install_image                                 || fail "Failed to install image."

#  output "Once you provide wifi and Google credentials, Google should start restoring apps."
#  prompt "When Google finishes restoring apps and USB debugging is enabled, press Enter to continue."

  reboot_to_fastboot                            || fail "Failed to reboot to fastboot."
  install_modified_boot                         || fail "Failed to install modified boot volume."
  install_twrp_image                            || fail "Failed to install TWRP recovery image."

# This seems nice but doesn't work.  Once you've booted Android, the recovery
# has already been overwritten.
#  reboot_from_fastboot                          || fail "Failed to reboot from fastboot."
#  wait_for_phone
#  reboot_to_recovery                            || fail "Failed to reboot to recovery."

  prompt "Please use the volume and power buttons to enter Recovery mode, then press Enter."
  prompt "Accept the proposal to modify the system volume, then hit Enter."
  prompt "Hit \"Reboot\", then \"System\", then come back and hit Enter."
  prompt "Accept the proposal to root the phone, then come back and hit Enter."

  wait_for_phone

  output "Give it a chance to finish booting.  (30s)"
  sleep 30

  restore_data                                  || fail "Failed to restore application data."
  reboot_phone                                  || fail "Failed to reboot."

  bye
}


function output {
  echo "${output_prefix}${1}"
}


function error_output {
  echo "${output_prefix}ERROR:  ${1}"
}


function fail {
  error_output "${1}"
  exit 1
}


function prompt {
  # Clear stdin.
  while read -r -t 0; do read -r; done
  read -p "${output_prefix}${1}  " response
}


function reboot_phone {
  output "Rebooting phone."
  adb reboot || fail "Failed to adb reboot."
}


function reboot_from_fastboot {
  output "Rebooting phone."
  fastboot reboot || fail "Failed to fastboot reboot."
}




function reboot_from_fastboot_to_fastboot {
  output "Rebooting to fastboot."
  fastboot reboot-bootloader || fail "Failed to fastboot reboot-bootloader"
}

function reboot_to_recovery {
  output "Rebooting to recovery."
  adb reboot recovery || fail "Failed to adb reboot recovery."
}


function reboot_to_fastboot {
  output "Rebooting to fastboot."
  adb reboot-bootloader || fail "Failed to reboot to fastboot."
}


function backup_data {
  backup_options=$backup_options_5
  if test $start_major_version -gt 5; then
    backup_options=$backup_options_6
  fi

  while true; do
    output "Backing up data to:  ${backup_file}"
    adb backup $backup_options
    file_size=$(stat --printf="%s" $backup_file)
    if test 0 = $file_size; then
      output "Warning:  That backup was empty."
      output "Warning:  Use the phone's back button to quit the backup if still running."
      prompt "Try again, Quit, or Continue?  [T,q,c]"
      case "${response}" in
        't')
          continue
          ;;
        'q')
          exit
          ;;
        'c')
          break
          ;;
        *)
          continue
          ;;
      esac
    else
      break
    fi
  done

  output "Backup successful."
}


function restore_data {
  while true; do
    output "Restoring data from:  $backup_file"
    adb restore $backup_file
    output "Warning:  I can't verify success.  (This is normal.)"
    output "Warning:  I need your judgement on whether to continue."
    prompt "Try again, Quit, or Continue?  [t,q,C]"
    case "${response}" in
      't')
        continue
        ;;
      'q')
        exit
        ;;
      'c')
        break
        ;;
      *)
        break
        ;;
    esac
  done

  output "Restore successful."
}


function greet {
  cat << EOF
| Requirements:
|
|   Your bootloader must be unlocked.
|
|   adb and fastboot must be available.  On Debian Jessie, get these packages:
|     android-tools-adb
|     android-tools-fastboot
|
|   Developer options must be enabled:
|     Settings --> About Phone --> Build Number --> tap a lot
|
|   USB debugging must be enabled:
|     Settings --> Developer --> USB Debugging
|
|   The phone must be connected to this host by USB.
|
| Itinerary:
| 
|   I will download the latest stock image for ${device_friendly_name}, code
|   named ${device_code_name}.  
|   
|   I will backup application and shared data from the phone.
|   
|   I will install the image.  
|   
|   You will give the phone wifi and google credentials.  
|   
|   The phone will restore your apps.  This will take a while.
|
|   You will install any unapproved apps you use.
|
|   You will re-enable USB debugging.
|
|   I will install a modified boot volume with selinux-compatible su, or somesuch.
|
|   I will install TWRP recovery.
|
|   You will answer a prompt in TWRP to allow modification of system volume.
|
|   You will hit "Reboot", then "System", in TWRP.
|
|   You will accept the offer from TWRP to install SuperSU and root the phone.
|   
|   I will restore application and shared data to the phone.  
|
| 
EOF

  
}


function bye {
  cat << EOF
| 
| Success!  Your phone should be up to date, and your data and settings should
| be restored.
EOF
}


function latest_image_link {
  # Output URL of latest image, scraped from last entry for this device in the listing.

  image_list_url='https://developers.google.com/android/nexus/images'

  wget \
    -O - \
    $image_list_url \
    2> /dev/null \
    | grep $device_code_name'.*'factory \
    | tail -n 1 \
    | awk -F '"' '{print $2}'
}


function latest_twrp_image_link {
  # Output URL of latest image, scraped from last entry for this device in the listing.

  image_list_url='https://dl.twrp.me/hammerhead/'

  wget $image_list_url -O - 2>/dev/null \
    | awk -F '"' '/href.*dl\.twrp\.me/ {print $2}' \
    | head -n 1 \
    | sed 's/\.html$//'
}


function download_latest_twrp_image {
  if test -e $twrp_image_file; then
    output "Warning:  TWRP image file already exists.  Skipping download."
  else
    output "TWRP download begins."
    wget --referer $latest_twrp_image_link $latest_twrp_image_link
    output "TWRP download complete."
  fi
}


function download_latest_image {
  if test -e $image_file; then
    output "Warning:  Image file already exists.  Skipping download."
  else
    output "Download begins."
    wget $latest_image_link
    output "Download complete."
  fi
}


function cycle_adb {
  output "Killing adb."
  # Sometimes you can start adb as the wrong user and get in an unhappy state.
  # Clear that.
  adb kill-server
  output "Starting adb."
  adb start-server
}


function unpack_image {
  output "Unpacking image."
  tar xf $image_file
  output "Image unpacked."
}


function install_image {
  cd $image_dir || fail "Failed to enter image directory."

  output "Beginning installation."

  install_script_file='flash-all.sh'
  install_script_pure_file='flash-all-pure.sh'
  install_script_real_file='flash-all-real.sh'
  grep -Ev ^#'|'^\$ $install_script_file > $install_script_pure_file
  cat > $install_script_real_file << EOF
fastboot flash bootloader bootloader-hammerhead-*.img
fastboot reboot-bootloader
sleep 5
fastboot flash radio radio-hammerhead-*.img
fastboot reboot-bootloader
sleep 5
fastboot -w update image-hammerhead-*.zip
EOF

  sed \
    -i \
    '
      s/bootloader-hammerhead-[a-z0-9]*\.img/bootloader-hammerhead-\*\.img/;
      s/radio-hammerhead-[a-z0-9]*-[0-9\.]*\.img/radio-hammerhead-\*\.img/;
      s/image-hammerhead-[a-z0-9]*\.zip/image-hammerhead-\*\.zip/;
    ' \
    $install_script_pure_file

  # This might be paranoid.  The script gets downloaded over https.  (Trust
  # Google with root on host system?)  I don't think the script changes much
  # anyway.
  if ! diff $install_script_pure_file $install_script_real_file; then
    error_output "The install script changed.  You may wish to review it, and/or the"
    error_output "procedure at:  https://developers.google.com/android/nexus/images"
    error_output "...then edit this script appropriately."
    return 1
  fi

  # flash-all.sh contents, or similar
  output "Flashing bootloader."
  fastboot flash bootloader bootloader-hammerhead-*.img || fail "Failed to flash bootloader."
  reboot_from_fastboot_to_fastboot || fail "Failed to reboot to fastboot."
  sleep 1
  output "Flashing radio."
  fastboot flash radio radio-hammerhead-*.img || fail "Failed to flash radio."
  reboot_from_fastboot_to_fastboot || fail "Failed to reboot to fastboot."
  sleep 1
  output "Flashing image."
  fastboot -w update image-hammerhead-*.zip || fail "Failed to flash image."

  output "Installation complete."
  
  cd - >/dev/null || fail "Failed to return from image directory."
}


function install_modified_boot {
  output "Installing modified boot volume."

  fastboot flash boot ~/images/nexus5/modified_boot_for_selinux_compatible_su/boot.img || fail "Failed to flash modified boot."

  output "Installation of modified boot volume successful."
}


function install_twrp_image {
  output "Beginning TWRP recovery image installation."

  fastboot flash recovery $twrp_image_file || fail "Failed to flash twrp image:  ${twrp_image_file}"

  output "TWRP recovery image installation successful."
}


function wait_for_phone {
  output "Waiting for phone..."
  phone_count=$(count_phones)
  while test $phone_count -lt $start_phone_count; do
    output "... $phone_count / $start_phone_count devices detected."
    sleep 1
    phone_count=$(count_phones)
  done
  output "Phone is back."
}


function count_phones {
  echo $(( $(adb devices | wc -l) - 2 ))
}


function wait_for_fastboot {
  output "Waiting for fastboot..."
  while test $(count_fastboots) -lt $start_fastboot_count; do
    sleep 1;
    output "..."
  done
  output "Phone is back."
}


function count_fastboots {
  echo $(fastboot devices | wc -l)
}


main
